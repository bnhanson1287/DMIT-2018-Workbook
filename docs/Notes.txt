Reverse Engineer a DB
create folder named Entities
 - add item ADO.NET Data Model
 - Code first from DB
 - create new connection
change namespace from .Entities to .DAL
add using .Entities
Add DAL folder
Move context to DAL folder

-----------------------------------
GridView - R,U,D
ListView - C,R,U,D
Repeater - R

-----------------------------------
Linqpad
make connection to db
Add connection -> Default linq to SQL -> '.' for server -> specify new or exsisting db -> select desired db -> OK
New Query -> select requisite connection.
**toggle Results screen on/off w/ Ctrl+r
Linq sample syntax = from item in Categories select item.CategoryName

----------------------------------
[] Transform Data
	|
	------> Reading/Querying
	|	|
	|	---> Linq 
	|	| +
	|	---> classes whose "shape" matches our UI needs (Display)
	|
	------> Issuing Commands
	|
	---> Business Oriented Commands
	|
	--->Process as transactions
[] Present Data in UI
[] Process Data in UI (send to BLL)
[] Security

------------------------------

IEnumerable <> = Is an Interface. Kind of like a list. 
Interface = a "contract" regarding methods & properties.
Dump is an extension method.
-----------------------------
Delete obj and bin then rebuild for roslyn.exe error
Tools -> NuGet Package Manager -> Package manager console -> Click to restore from your online package sources
or
PM> update-package -r
-----------------------------

ObjectContext instance has been disposed error message (Lazy Loading Issue) - BLL, Controller "return context.Class.Include("Class").ToList();" --- bad way 'magic string' --
"return context.Class.Include(nameof(Supplier.Address)).ToList();" --- BEST PRACTICES

Press no when dialogue box asks if I want to reconfigure ListView when adding Insert to ObjectDataSource.

---------------------------

lightning bolt in intellisense is an event. has past tense and present tense to let us choose to do something at a specific time

---------------------------
$"string" = string interpolation: allows me to not have to add a variable value to a string without concatenation or placeholder.

---------------------------
Nuget FreeCode.WebApp

drag user control onto page

---------------------------
add DataKeyNames to ListView or GridView to support an Update/Delete. Keeps the primarykey.

--------------------------

in order to do a Linq Query, must have a query collection "from person in Room"

------------------------


-----------------------
Lamda operator => (variables => expression that reflects whats going on inside an anonymus method) EX) (row => row.CategoryName)
----------------------

DAN'S VERSION OF REPEATERS
__________________________

Ctrl + H Search and replace in highlighted area

ListView can be autogenerated.. cull things I dont need after "Alternating template, selectedItem, empty"

-:+1: closes issues in git commit

Make sure I have an Item Type

DataSourceID should be on the outermost repeater

Innermost repeater should have a DataSource of " <%# Item."Class" %> 


        TEST #2
__________________________

Reverse engineer db
linq for nested repeater
list view
nested repeater
 

METHOD CHAINING
___________________________

EX: 

public void Delete_Something(int somethingId)
{
	using(var context = new ThingContext)
	{
		var existing = context.Something.Find(somethingId)
		context.Somthing.Remove(existing);
		context.SaveChanges();
	}

}
public void Delete_Something(Something item)
{
	Delete_Something(item); // saves on maintenance	
}
